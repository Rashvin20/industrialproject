import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader
import tacoreader
import rasterio as rio
import numpy as np
import random
import matplotlib.pyplot as plt
import math
import os

# ---------- 1. Dataset ----------
class Sen2NaipDataset(Dataset):
    def __init__(self, split="tacofoundation:sen2naipv2-unet", indices=None, patch_size=64, scale=4, color=False):
        self.dataset = tacoreader.load(split)
        self.indices = indices if indices else range(len(self.dataset))
        self.patch_size = patch_size
        self.scale = scale
        self.color = color
        self.hr_patch_size = patch_size * scale

    def __len__(self):
        return len(self.indices)

    def __getitem__(self, idx):
        sample_idx = self.indices[idx]
        lr_ref = self.dataset.read(sample_idx).read(0)
        hr_ref = self.dataset.read(sample_idx).read(1)

        with rio.open(lr_ref) as src_lr, rio.open(hr_ref) as src_hr:
            lr_data = src_lr.read(window=rio.windows.Window(0, 0, self.patch_size, self.patch_size))
            hr_data = src_hr.read(window=rio.windows.Window(0, 0, self.hr_patch_size, self.hr_patch_size))

        if self.color:
            return self.to_tensor_rgb(lr_data), self.to_tensor_rgb(hr_data)
        else:
            return self.to_tensor_gray(lr_data), self.to_tensor_gray(hr_data)

    def to_tensor_gray(self, data, norm=3000.0):
        rgb = data[:3] / norm
        gray = 0.2989 * rgb[0] + 0.5870 * rgb[1] + 0.1140 * rgb[2]
        return torch.tensor(gray, dtype=torch.float32).unsqueeze(0)

    def to_tensor_rgb(self, data, norm=3000.0):
        rgb = data[:3] / norm
        return torch.tensor(rgb, dtype=torch.float32)


# ---------- 2. Models ----------
class SRCNN(nn.Module):
    def __init__(self, in_channels=1, out_channels=1):
        super(SRCNN, self).__init__()
        self.layer1 = nn.Conv2d(in_channels, 64, kernel_size=9, padding=4)
        self.layer2 = nn.Conv2d(64, 32, kernel_size=1)
        self.layer3 = nn.Conv2d(32, out_channels, kernel_size=5, padding=2)

    def forward(self, x):
        x = F.relu(self.layer1(x))
        x = F.relu(self.layer2(x))
        return self.layer3(x)

class ResidualBlock(nn.Module):
    def __init__(self, channels):
        super().__init__()
        self.conv1 = nn.Conv2d(channels, channels, 3, padding=1)
        self.relu = nn.ReLU(inplace=True)
        self.conv2 = nn.Conv2d(channels, channels, 3, padding=1)

    def forward(self, x):
        return x + self.conv2(self.relu(self.conv1(x)))

class ESRCNN(nn.Module):
    def __init__(self, in_channels=3, num_res_blocks=5):
        super().__init__()
        self.input_conv = nn.Conv2d(in_channels, 64, kernel_size=9, padding=4)
        self.res_blocks = nn.Sequential(*[ResidualBlock(64) for _ in range(num_res_blocks)])
        self.output_conv = nn.Conv2d(64, in_channels, kernel_size=5, padding=2)

    def forward(self, x):
        x = F.relu(self.input_conv(x))
        x = self.res_blocks(x)
        return self.output_conv(x)


# ---------- 3. Training ----------
def compute_psnr(output, target, max_pixel=1.0):
    mse = F.mse_loss(output, target)
    return 100 if mse.item() == 0 else 20 * math.log10(max_pixel / math.sqrt(mse.item()))

def train_model(model, dataloader, device, num_epochs=5, save_path="model", upsample_input=True):
    print("Training")
    criterion = nn.MSELoss()
    optimizer = optim.Adam(model.parameters(), lr=1e-4)

    for epoch in range(num_epochs):
        model.train()
        running_loss = 0.0

        for i, (lr, hr) in enumerate(dataloader):
            lr, hr = lr.to(device), hr.to(device)
            input_img = F.interpolate(lr, scale_factor=4, mode='bicubic', align_corners=False) if upsample_input else lr

            optimizer.zero_grad()
            output = model(input_img)
            loss = criterion(output, hr)
            loss.backward()
            optimizer.step()

            running_loss += loss.item()
            if (i + 1) % 100 == 0:
                print(f"Epoch [{epoch+1}/{num_epochs}], Step [{i+1}], Loss: {running_loss/100:.4f}")
                running_loss = 0.0

        psnr = compute_psnr(output, hr)
        print(f"Epoch [{epoch+1}], PSNR: {psnr:.2f} dB")

        if (epoch + 1) % 5 == 0:
            torch.save(model.state_dict(), f"{save_path}.pth")
            print(f"Model saved as: {save_path}.pth")


# ---------- 4. Inference & Visualization ----------
def test_random_sample(model, dataset, device, color=False, upsample_input=True):
    model.eval()
    idx = random.randint(0, len(dataset) - 1)
    lr, hr = dataset[idx]
    lr = lr.unsqueeze(0).to(device)
    hr = hr.unsqueeze(0).to(device)

    input_img = F.interpolate(lr, scale_factor=4, mode='bicubic', align_corners=False) if upsample_input else lr

    with torch.no_grad():
        sr = model(input_img)

    psnr = compute_psnr(sr, hr)
    print(f"Test sample index {idx} | PSNR: {psnr:.2f} dB")

    def to_np(img):
        return img.squeeze().cpu().numpy()

    if color:
        lr_np = np.transpose(to_np(lr), (1, 2, 0))
        hr_np = np.transpose(to_np(hr), (1, 2, 0))
        sr_np = np.transpose(to_np(sr), (1, 2, 0))
    else:
        lr_np = to_np(lr)
        hr_np = to_np(hr)
        sr_np = to_np(sr)

    plt.figure(figsize=(15, 5))
    titles = ['Low-Resolution (Input)', 'High-Resolution (Ground Truth)', 'SR Output']
    for i, img in enumerate([lr_np, hr_np, sr_np]):
        plt.subplot(1, 3, i + 1)
        plt.imshow(img, cmap=None if color else 'gray')
        plt.title(titles[i])
        plt.axis('off')
    plt.tight_layout()
    plt.show()


# ---------- 5. Entrypoint ----------
def main(train=True, model_type="srcnn", model_path="model.pth", color=False):
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    in_channels = 3 if color else 1

    if model_type == "srcnn":
        model = SRCNN(in_channels=in_channels, out_channels=in_channels).to(device)
    elif model_type == "esrcnn":
        model = ESRCNN(in_channels=in_channels).to(device)
    else:
        raise ValueError("Unsupported model type. Choose from 'srcnn', 'esrcnn'")

    if train:
        train_dataset = Sen2NaipDataset(indices=range(100), color=color)
        train_loader = DataLoader(train_dataset, batch_size=1, shuffle=True)
        train_model(model, train_loader, device, save_path=model_path, upsample_input=(model_type != "esrcnn"))
    else:
        if not os.path.exists(model_path):
            raise FileNotFoundError(f"Model weights not found at {model_path}")
        model.load_state_dict(torch.load(model_path, map_location=device))

        test_dataset = Sen2NaipDataset(indices=range(10), color=color)
        test_random_sample(model, test_dataset, device, color=color, upsample_input=(model_type != "esrcnn"))


# -------- Run here --------
# main(train=True, model_type="esrcnn", color=True)
main(train=False, model_type="esrcnn", color=True)

import os
import argparse
import glob

import cv2
import torch
from realesrgan import RealESRGAN

def parse_args():
    parser = argparse.ArgumentParser(
        description="Apply Real-ESRGAN super-resolution to images."
    )
    parser.add_argument(
        "--input", "-i", required=True,
        help="Input image or folder (e.g. 'input.jpg' or './images/*.png')"
    )
    parser.add_argument(
        "--output", "-o", default="outputs",
        help="Output directory (will be created if it doesn't exist)"
    )
    parser.add_argument(
        "--scale", "-s", type=int, default=4,
        choices=[2, 3, 4],
        help="Upscaling factor (2, 3, or 4)"
    )
    parser.add_argument(
        "--device", "-d", default="cuda",
        help="Computation device: 'cuda' or 'cpu'"
    )
    return parser.parse_args()

def main():
    args = parse_args()

    # Prepare output directory
    os.makedirs(args.output, exist_ok=True)

    # Initialize model
    device = torch.device(args.device if torch.cuda.is_available() else "cpu")
    model = RealESRGAN(device, scale=args.scale)
    # Downloads the weights automatically if not found
    model.load_weights(f"RealESRGAN_x{args.scale}.pth")

    # Gather input files
    if os.path.isdir(args.input):
        pattern = os.path.join(args.input, f"*.{'png' if args.input.endswith('png') else '*'}")
        files = glob.glob(os.path.join(args.input, "*.*"))
    else:
        files = glob.glob(args.input)

    if not files:
        print(f"No files matched: {args.input}")
        return

    # Process each image
    for img_path in files:
        # Read
        img = cv2.imread(img_path, cv2.IMREAD_UNCHANGED)
        if img is None:
            print(f"Failed to load {img_path}, skipping.")
            continue

        # Super-resolve
        sr_img = model.predict(img)

        # Save
        base, ext = os.path.splitext(os.path.basename(img_path))
        out_path = os.path.join(args.output, f"{base}_x{args.scale}{ext}")
        cv2.imwrite(out_path, sr_img)
        print(f"Saved: {out_path}")

if __name__ == "__main__":
    main()

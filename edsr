import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, Dataset
import torch.nn.functional as F
import matplotlib.pyplot as plt
import numpy as np
import rasterio as rio
import tacoreader

# EDSR Model Definition
class EDSR(nn.Module):
    def __init__(self, scale=2):
        super(EDSR, self).__init__()
        self.scale = scale
        self.conv1 = nn.Conv2d(3, 64, kernel_size=3, padding=1)
        self.conv2 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.conv3 = nn.Conv2d(64, 3 * (scale ** 2), kernel_size=3, padding=1)
        self.pixel_shuffle = nn.PixelShuffle(scale)

    def forward(self, x):
        x = torch.relu(self.conv1(x))
        x = torch.relu(self.conv2(x))
        x = self.conv3(x)
        x = self.pixel_shuffle(x)
        return x

# Custom Dataset using Sen2Naip
class Sen2NaipDataset(Dataset):
    def __init__(self, split="tacofoundation:sen2naipv2-crosssensor", indices=None, patch_size=64, scale=2, max_samples=100):
        self.dataset = tacoreader.load(split)
        self.indices = indices if indices else range(min(len(self.dataset), max_samples))
        self.patch_size = patch_size
        self.scale = scale
        self.hr_patch_size = patch_size * scale

    def __len__(self):
        return len(self.indices)

    def __getitem__(self, idx):
        sample_idx = self.indices[idx]
        lr_ref = self.dataset.read(sample_idx).read(0)
        hr_ref = self.dataset.read(sample_idx).read(1)

        with rio.open(lr_ref) as src_lr, rio.open(hr_ref) as src_hr:
            lr_data = src_lr.read(window=rio.windows.Window(0, 0, self.patch_size, self.patch_size))
            hr_data = src_hr.read(window=rio.windows.Window(0, 0, self.hr_patch_size, self.hr_patch_size))

        lr_tensor = self.to_tensor(lr_data)
        hr_tensor = self.to_tensor(hr_data)
        return lr_tensor, hr_tensor

    def to_tensor(self, data, norm=3000.0):
        data = np.clip(data[:3], 0, norm) / norm  # normalize RGB only
        return torch.tensor(data, dtype=torch.float32)

# PSNR Calculation

def calculate_psnr(sr_img, hr_img, max_value=1.0):
    mse = F.mse_loss(sr_img, hr_img)
    psnr = 20 * torch.log10(max_value / torch.sqrt(mse))
    return psnr

# Training Function
def train_model(model, dataloader, num_epochs=5, lr=1e-4):
    criterion = nn.L1Loss()
    optimizer = optim.Adam(model.parameters(), lr=lr)
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    model.to(device)

    for epoch in range(num_epochs):
        model.train()
        running_loss = 0.0

        for lr_imgs, hr_imgs in dataloader:
            lr_imgs, hr_imgs = lr_imgs.to(device), hr_imgs.to(device)

            hr_imgs_resized = F.interpolate(hr_imgs, size=(lr_imgs.size(2) * model.scale, lr_imgs.size(3) * model.scale), mode='bicubic', align_corners=False)

            optimizer.zero_grad()
            sr_imgs = model(lr_imgs)
            loss = criterion(sr_imgs, hr_imgs_resized)
            loss.backward()
            optimizer.step()
            running_loss += loss.item()

        print(f"Epoch [{epoch+1}/{num_epochs}], Loss: {running_loss / len(dataloader):.4f}")

        with torch.no_grad():
            model.eval()
            for lr_imgs, hr_imgs in dataloader:
                lr_imgs, hr_imgs = lr_imgs.to(device), hr_imgs.to(device)
                sr_imgs = model(lr_imgs)

                sr_imgs_resized = F.interpolate(sr_imgs, size=(hr_imgs.size(2), hr_imgs.size(3)), mode='bicubic', align_corners=False)
                psnr_value = calculate_psnr(sr_imgs_resized, hr_imgs)
                print(f"PSNR: {psnr_value.item():.4f} dB")

                sr_img = sr_imgs_resized[0].cpu().clamp(0, 1).numpy().transpose(1, 2, 0)
                lr_img = lr_imgs[0].cpu().clamp(0, 1).numpy().transpose(1, 2, 0)
                hr_img = hr_imgs[0].cpu().clamp(0, 1).numpy().transpose(1, 2, 0)

                plt.figure(figsize=(12, 4))
                plt.subplot(1, 3, 1)
                plt.imshow(lr_img)
                plt.title("Low Resolution")
                plt.axis('off')

                plt.subplot(1, 3, 2)
                plt.imshow(hr_img)
                plt.title("High Resolution")
                plt.axis('off')

                plt.subplot(1, 3, 3)
                plt.imshow(sr_img)
                plt.title(f"Super-Resolved (PSNR: {psnr_value.item():.2f} dB)")
                plt.axis('off')

                plt.show()
                break

# Load dataset and train
scale = 2
train_dataset = Sen2NaipDataset(scale=scale, patch_size=64, max_samples=100)
train_loader = DataLoader(train_dataset, batch_size=8, shuffle=True)

model = EDSR(scale=scale)
train_model(model, train_loader, num_epochs=2)

# Save model
torch.save(model.state_dict(), "edsr_model_sen2naip.pth")
